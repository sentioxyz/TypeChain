/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  Interface,
  LogDescription,
} from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "../common";

export declare namespace Events {
  export type EventDataStruct = {
    index: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type EventDataStructOutput = [bigint, string] & {
    index: bigint;
    name: string;
  };
}

export interface EventsInterface extends Interface {}

export interface AnonEvent1EventObject {
  value1: bigint;
}
export type AnonEvent1Event = TypedEvent<[bigint], AnonEvent1EventObject> &
  LogDescription;

export type AnonEvent1EventFilter = TypedEventFilter<AnonEvent1Event>;

export interface Event1EventObject {
  value1: bigint;
  value2: bigint;
}
export type Event1Event = TypedEvent<[bigint, bigint], Event1EventObject> &
  LogDescription;

export type Event1EventFilter = TypedEventFilter<Event1Event>;

export interface Event2EventObject {
  arg0: bigint;
}
export type Event2Event = TypedEvent<[bigint], Event2EventObject> &
  LogDescription;

export type Event2EventFilter = TypedEventFilter<Event2Event>;

export interface Event3_bool_uint256_EventObject {
  value1: boolean;
  value2: bigint;
}
export type Event3_bool_uint256_Event = TypedEvent<
  [boolean, bigint],
  Event3_bool_uint256_EventObject
> &
  LogDescription;

export type Event3_bool_uint256_EventFilter =
  TypedEventFilter<Event3_bool_uint256_Event>;

export interface Event3_uint256_EventObject {
  value1: bigint;
}
export type Event3_uint256_Event = TypedEvent<
  [bigint],
  Event3_uint256_EventObject
> &
  LogDescription;

export type Event3_uint256_EventFilter = TypedEventFilter<Event3_uint256_Event>;

export interface Event4EventObject {
  data: Events.EventDataStructOutput;
}
export type Event4Event = TypedEvent<
  [Events.EventDataStructOutput],
  Event4EventObject
> &
  LogDescription;

export type Event4EventFilter = TypedEventFilter<Event4Event>;

export interface NoArgsEventEventObject {}
export type NoArgsEventEvent = TypedEvent<[], NoArgsEventEventObject> &
  LogDescription;

export type NoArgsEventEventFilter = TypedEventFilter<NoArgsEventEvent>;

export interface UpdateFrequencySetEventObject {
  arg0: string[];
  arg1: bigint[];
}
export type UpdateFrequencySetEvent = TypedEvent<
  [string[], bigint[]],
  UpdateFrequencySetEventObject
> &
  LogDescription;

export type UpdateFrequencySetEventFilter =
  TypedEventFilter<UpdateFrequencySetEvent>;

export interface Events extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: EventsInterface;
}
